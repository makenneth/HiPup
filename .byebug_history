c
Group.includes(:tags).select do |group| Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < miles.to_i end
Group.includes(:tags).select do |group| 
exit
c
cc
c
cc
c
cc
c
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng])
group.lat
user_coord
group
goroup
Group
exit
user_coord
c
user_coord
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng])
c
group
user_coord
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng])
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < 6000
c
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < 6000
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < 5000
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng])
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < 100
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < miles.to_i
 Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < miles.to_i
group
show = Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < miles.to_i
c
 Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < miles.to_i
Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [group.lat, group.lng]) < miles.to_i
Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < miles.to_i
user_coord
group
miles
exit
Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < miles.to_i
selected_groups
c
selected_groups
c
s
exit
s
Group.all.select do |group| (Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < 250) }
Group.all.select{ |group| (Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < 250) }
Group.all.select{ |group| (Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < 25) }
Group.all.select{ |group| (Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < miles.to_i) }
Group.select{ |group| (Geocoder::Calculations.distance_between(user_coord, [group.lat, group.lng]) < miles.to_i) }
exit
Group.where(false)
Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < 5
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < 5)
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < miles.to_i)
a = Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [40.7128, -74.0059])
a[26]
a = Group.where(Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [:lat, :lng]) < miles.to_i)
Group.all.length
Group.all
a.length
a[0]
a = Group.where(Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [:lat, :lng]) < miles.to_i)
a = _
Group.where(Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [:lat, :lng]) < miles.to_i)
user_coord
miles
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < miles.to_i)
miles
c
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < miles.to_i)
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < miles)
miles
exit
Group.where(Geocoder::Calculations.distance_between([37,79, -122.39], [:lat, :lng]) < miles)
Group.where(Geocoder::Calculations.distance_between(user_coord.map(&:to_f), [:lat, :lng]) < miles)
Group.where(Geocoder::Calculations.distance_between(user_coord, [:lat, :lng]) < miles)
user_coord
exit
GeoCoder
params[:user_coord].map(&:to_f)
params[:user_coord]
:user_coord
Group.distance_between(params[:user_coord].map(&:to_f), params[:miles]).includes(:tags)
Group.distance_between(params[:user_coord].to_f, params[:miles]).includes(:tags)
Group.distance_between(params[:user_coord], params[:miles]).includes(:tags)
params[:user_coord]
exit
Group.distance_between(params[:user_coord].map(&:to_f), params[:miles]).includes(:tags)
Group.distance_between(params[:user_coord], params[:miles]).includes(:tags)
params
exit
params[:user_coord]
Group.distance_between(params[:user_coord]
@groups
exit
params[:location_type]Ã¥
c
exit
s
params[:location_type]
params
c
params.delete(:tag_ids).map(&:to_i)
params = group_params
params
params.delete(:tag_ids)
params = group_params
group_params
params
params = group_params.delete(:tag_ids)
params = group_params
group_params
group_params.delete(:tag_ids)
group_params[:tag_ids]
group_params
group_params.delete([:tag_ids])
group_params.delete[:tag_ids]
c
s
group_params
c
group_params
exit
group_params
exit
group_params
c
@group_event
params[:user_id].to_i
params[:user_id]
params[:user_id
@group_event.host_id != params[:user_id].to_i
c
params[:user_id]
@group_event.host_id
params[:id]
params:id
c
cc
c
display event.group
display event.group.title
display event.group
exit
c
event
c
cc
c
event.group.title
event.group
event.grouo
event
c
GroupEvent.find(params[:id])
GroupEvent.find(13)
params
c
group.group_events[0].event_time
group.group_events[0]
group.group_events
group
json
c
@group
exit
event
event.title
event.time
event.event_time
event
c
Time.utc(*c
Time.zone = params[:time_zone]
params[:time_zone]
params[:time_Zone]
params
c
find_zone!('PDT')
@user.time_zone
@user
c
params[:time_zone]
params
exit
params
cookies
c
cc
c
cc
c
cc
c
cookies[:time_zone]
cookies
params
c
eit
params[:timezone]
params.timezone
params
c
queries
query
params
c
params[:timezone]
params
c
params
c
cc
c
params
exit
params
c
exit
Time.zone.now
Time.zone.local
Time.zone = "America/Los_Angeles"
Time.zone = "Pacific Daylight Time"
current_user.time_zone
current_user.timezone
current_user
c
@user.is_password?(params[:user][:new_password])
@user
c
s
c
s
@user.is_password?(params[:user][:old_password])
params[:user][:old_password]
params[:user]
params[:user
@user
exit
@group_even
c
params[:id]
params
@group_event.errors.full_messages
@group_event.errors
@group_event
c
s
